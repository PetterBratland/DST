#include "system_sam3x.h"
#include "at91sam3x8.h"
#include <stdio.h>
#include <string.h> 



void init_tempsensor(void){
  *AT91C_PMC_PCER = (1<<27); //Initialize PMC - TC0
  *AT91C_TC0_CMR = (*AT91C_TC0_CMR & 0xFFF0FFF8)|0x60000; //Select timerclock 1, LDRA: Falling, LDRB: Rising
  *AT91C_TC0_CCR = 0x5;    //Enable counter and make a sw_reset in TC0_CCR0
   //Temp pins
  *AT91C_PIOB_PER = (1<<25);
  *AT91C_PIOB_PPUDR = (1<<25);
  *AT91C_PIOB_OER = (1<<25);
   //Reset
  *AT91C_PIOB_SODR = (1<<25);
  *AT91C_PIOB_CODR = (1<<25);
  ClockU = 0;
  while(ClockU <= 16);
  *AT91C_PIOB_SODR = (1<<25);
  *AT91C_TC0_SR; //Clear old interrupt by read statusreg
  NVIC_ClearPendingIRQ(TC0_IRQn); // Clear IRQn(Interrupt Request) pending status
  NVIC_SetPriority(TC0_IRQn, 1);  // Set the priority grouping // higher or lower prio?   NVIC_EnableIRQ(TC0_IRQn);
  NVIC_EnableIRQ(TC0_IRQn);
}

void start_temp_measurement(void){
  //Create start pulse
  *AT91C_PIOB_OER = (1<<25);
  //Reset
  *AT91C_PIOB_SODR = (1<<25);
  *AT91C_PIOB_CODR = (1<<25);
  ClockU = 0;
  while(ClockU <= 16);
  *AT91C_PIOB_SODR = (1<<25);  
  //Create start pulse 
  *AT91C_PIOB_CODR = (1<<25);
  delay(25);
  *AT91C_PIOB_SODR = (1<<25);
  *AT91C_PIOB_ODR = (1<<25);
  *AT91C_TC0_CCR = (1<<2); //Software reset
  *AT91C_TC0_SR; //Clear old interrupt by read statusreg
  *AT91C_TC0_IER = (1<<6); //Enable interrupt for LDRBS
}

void TC0_Handler(void){
  *AT91C_TC0_SR;
  *AT91C_TC0_IDR = (1<<6);
  
  globalFlag = 1;
}
  *AT91C_TC0_SR;
  *AT91C_TC0_IDR = (1<<6);
  
  globalFlag = 1;
}

float tempValue(){
  float tempV;
  if(globalFlag == 1){
    globalFlag = 0;
    float f1 = (*AT91C_TC0_RA)/42;
    float f2 = (*AT91C_TC0_RB)/42;
    float dX = f2-f1;
    tempV = (dX/5)-273.15;
    flagTemp = 1;
  }
  
  return tempV;
}